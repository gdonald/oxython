//! Virtual Machine for executing Python bytecode.
//!
//! This module provides the core VM implementation for the Oxython interpreter.
//! The VM executes bytecode generated by the compiler, managing:
//! - Stack-based evaluation of expressions and statements
//! - Function calls and call frames
//! - Variable scopes (global and local)
//! - Object-oriented programming features (classes, inheritance, methods)
//! - Closures and upvalue capture
//!
//! # Architecture
//!
//! The VM is organized into several submodules, each handling specific concerns:
//!
//! - [`call_frame`] - Call frame management for function calls
//! - [`collections`] - Collection utility functions (slicing, iteration)
//! - [`native`] - Native function implementations (e.g., `super()`)
//! - [`opcodes`] - Opcode handler implementations organized by category
//! - [`stack`] - Stack operations and management
//! - [`string_repr`] - Object string representation (`__str__`, `__repr__`)
//! - [`upvalues`] - Closure and upvalue management
//! - [`values`] - Value operations (e.g., truthiness checking)
//!
//! # Core Components
//!
//! ## VM Struct
//!
//! The [`VM`] struct maintains the interpreter state:
//! - **Stack**: Holds values during expression evaluation
//! - **Globals**: HashMap of global variables
//! - **Frames**: Call stack for function invocations
//! - **Open Upvalues**: Captured variables for closures
//!
//! ## Execution Flow
//!
//! 1. **Initialization**: Create a new VM with [`VM::new()`]
//! 2. **Interpretation**: Call [`VM::interpret()`] with a bytecode chunk
//! 3. **Execution**: The [`VM::run()`] method executes opcodes in a loop
//! 4. **Result**: Returns [`InterpretResult`] indicating success or error
//!
//! # Example
//!
//! ```rust,ignore
//! use oxython::vm::VM;
//!
//! let mut vm = VM::new();
//! let chunk = /* compiled bytecode */;
//! let result = vm.interpret(chunk);
//! ```
//!
//! # Opcode Categories
//!
//! The VM handles various categories of opcodes:
//!
//! - **Arithmetic**: `OpAdd`, `OpSubtract`, `OpMultiply`, `OpDivide`, `OpModulo`
//! - **Comparison**: `OpLess`, `OpEqual`
//! - **Collections**: `OpIndex`, `OpSlice`, `OpLen`, `OpAppend`, `OpRange`, `OpContains`
//! - **Control Flow**: `OpJump`, `OpJumpIfFalse`, `OpLoop`, `OpIterNext`
//! - **Functions**: `OpMakeFunction`, `OpCall`, `OpReturn`
//! - **Variables**: `OpGetLocal`, `OpSetLocal`, `OpGetGlobal`, `OpSetGlobal`, `OpGetUpvalue`, `OpSetUpvalue`
//! - **Classes**: `OpMakeClass`, `OpGetAttr`, `OpSetAttr`, `OpInherit`
//! - **Strings**: `OpStrLower`, `OpStrIsAlnum`, `OpStrJoin`
//! - **Builtins**: `OpRound`, `OpZip`, `OpToList`
//! - **Stack Operations**: `OpPop`, `OpDup`, `OpSwap`, `OpConstant`
//! - **I/O**: `OpPrint`, `OpPrintln`, `OpPrintSpaced`

mod bytecode_reader;
mod call_frame;
pub mod collections;
pub mod native;
mod opcode_dispatcher;
pub mod opcodes;
mod stack_ops;
mod string_repr;
mod upvalues;
pub mod values;

use crate::bytecode::{Chunk, OpCode};
use crate::object::{ClassObject, FunctionObject, InstanceObject, Object, ObjectType, UpvalueRef};
use call_frame::{CallFrame, FRAMES_MAX};
use stack_ops::Stack;
use std::cell::RefCell;
use std::collections::HashMap;
use std::rc::Rc;

pub struct VM {
    stack: Stack,
    globals: HashMap<String, Object>,
    frames: Vec<CallFrame>,
    open_upvalues: Vec<UpvalueRef>,
}

#[derive(Debug, PartialEq)]
pub enum InterpretResult {
    Ok,
    CompileError,
    RuntimeError,
}

impl Default for VM {
    fn default() -> Self {
        Self::new()
    }
}

impl VM {
    pub fn new() -> Self {
        let mut vm = VM {
            stack: Stack::new(),
            globals: HashMap::new(),
            frames: Vec::new(),
            open_upvalues: Vec::new(),
        };
        vm.register_builtins();
        vm
    }

    fn register_builtins(&mut self) {
        native::register_builtins(&mut self.globals);
    }

    pub fn interpret(&mut self, chunk: Chunk) -> InterpretResult {
        self.stack.reset();
        self.frames.clear();
        self.open_upvalues.clear();

        let script_function = Rc::new(FunctionObject::new(
            "<script>".to_string(),
            0,
            chunk,
            Vec::new(),
            "<script>".to_string(),
        ));
        self.push(Rc::new(ObjectType::Function(script_function.clone())));
        self.frames
            .push(CallFrame::new(script_function, 0, None, None));

        self.run()
    }

    fn run(&mut self) -> InterpretResult {
        loop {
            if self.frames.is_empty() {
                return InterpretResult::Ok;
            }

            let instruction = OpCode::from(self.read_byte());
            let result = self.dispatch_opcode(instruction);

            if result != InterpretResult::Ok {
                return result;
            }
        }
    }

    fn call_value(&mut self, arg_count: usize) -> bool {
        if self.stack.top() < arg_count + 1 {
            return false;
        }
        let callee_index = self.stack.top() - arg_count - 1;
        let callee = self.stack.get(callee_index).clone();
        match &*callee {
            ObjectType::Function(function) => {
                self.call_function(function.clone(), callee_index, arg_count, None, None)
            }
            ObjectType::NativeFunction(name, func) => {
                // Special handling for super() - it needs access to self
                if name == "super" {
                    // Get the class context from the current frame
                    let class_context = self.frames.last().and_then(|f| f.class_context.clone());

                    // Get 'self' from the current frame's first local variable (slot + 1)
                    let self_instance = if let Some(frame) = self.frames.last() {
                        self.stack.get(frame.slot + 1).clone()
                    } else {
                        return false;
                    };

                    // Call the native function with self as an argument
                    let args = [self_instance];
                    match func(&args, class_context) {
                        Ok(result) => {
                            self.stack.set_top(callee_index);
                            self.push(result);
                            true
                        }
                        Err(_) => false,
                    }
                } else {
                    // General native function call
                    let class_context = self.frames.last().and_then(|f| f.class_context.clone());
                    let args: Vec<Object> = (0..arg_count)
                        .map(|i| self.stack.get(callee_index + 1 + i).clone())
                        .collect();
                    match func(&args, class_context) {
                        Ok(result) => {
                            self.stack.set_top(callee_index);
                            self.push(result);
                            true
                        }
                        Err(_) => false,
                    }
                }
            }
            ObjectType::Class(class) => {
                // Create instance
                let instance = Rc::new(RefCell::new(InstanceObject::new(class.clone())));
                let instance_obj = Rc::new(ObjectType::Instance(instance.clone()));

                // Look for __init__ method (traverses inheritance chain)
                if let Some(init_method) = class.get_method("__init__") {
                    if let ObjectType::Function(init_func) = &*init_method {
                        // Stack layout: [class, arg1, arg2, ...]
                        // We want: [instance, instance, arg1, arg2, ...] so that after __init__ returns,
                        // one instance remains

                        // Push instance at the callee position
                        self.stack.set(callee_index, instance_obj.clone());

                        // Insert instance as self parameter
                        // Shift arguments up by one to make room for self
                        let stack_top = self.stack.top();
                        for i in (callee_index + 1..stack_top).rev() {
                            let value = self.stack.get(i).clone();
                            self.stack.set(i + 1, value);
                        }
                        self.stack.set(callee_index + 1, instance_obj.clone());
                        self.stack.set_top(stack_top + 1);

                        // Save instance beyond the call frame so it doesn't get overwritten
                        let new_top = self.stack.top();
                        self.stack.set(new_top, instance_obj.clone());
                        let saved_instance_slot = new_top;
                        self.stack.set_top(new_top + 1);

                        // Now call __init__: [instance, self(instance), arg1, arg2, ..., saved_instance]
                        // Pass the saved_instance_slot to call_function so handle_return can restore it
                        // Pass the class as context for super() to work in __init__
                        return self.call_function(
                            init_func.clone(),
                            callee_index,
                            arg_count + 1,
                            Some(saved_instance_slot),
                            Some(class.clone()),
                        );
                    }
                }

                // No __init__, just return the instance
                self.stack.set(callee_index, instance_obj);
                self.stack.set_top(callee_index + 1);
                true
            }
            ObjectType::BoundMethod(instance, method) => {
                // Insert the instance as first parameter
                // Stack layout: [bound_method, arg1, arg2, ...]
                // Need: [bound_method, instance(self), arg1, arg2, ...]

                // Shift arguments to make room for self
                let stack_top = self.stack.top();
                for i in (callee_index + 1..stack_top).rev() {
                    let value = self.stack.get(i).clone();
                    self.stack.set(i + 1, value);
                }
                // Insert instance as first parameter
                self.stack.set(callee_index + 1, instance.clone());
                self.stack.set_top(stack_top + 1);

                // Get the class context from the instance for super() support
                let class_context = if let ObjectType::Instance(inst_ref) = &**instance {
                    Some(inst_ref.borrow().class.clone())
                } else {
                    None
                };

                match &**method {
                    ObjectType::Function(function) => {
                        // Call with arg_count + 1 (including self)
                        // slot points to bound_method, parameters start at slot+1
                        self.call_function(
                            function.clone(),
                            callee_index,
                            arg_count + 1,
                            None,
                            class_context,
                        )
                    }
                    _ => false,
                }
            }
            _ => false,
        }
    }

    fn call_function(
        &mut self,
        function: Rc<FunctionObject>,
        callee_index: usize,
        arg_count: usize,
        instance_slot: Option<usize>,
        class_context: Option<Rc<ClassObject>>,
    ) -> bool {
        // Validate argument count with default parameters support
        // arg_count must be between required_args and arity (inclusive)
        if arg_count < function.required_args || arg_count > function.arity {
            return false;
        }

        if self.frames.len() >= FRAMES_MAX {
            return false;
        }

        // Fill in missing arguments with default values
        if arg_count < function.arity {
            // Push default values for missing parameters
            for i in arg_count..function.arity {
                if let Some(Some(default_value)) = function.default_values.get(i) {
                    self.push(default_value.clone());
                } else {
                    // This should not happen if required_args is calculated correctly
                    return false;
                }
            }
        }

        self.frames.push(CallFrame::new(
            function,
            callee_index,
            instance_slot,
            class_context,
        ));
        true
    }

    fn handle_return(&mut self) -> bool {
        let (frame_slot, frame_arity, instance_slot) = if let Some(frame) = self.frames.last() {
            (frame.slot, frame.function.arity, frame.instance_slot)
        } else {
            (0, 0, None)
        };
        // Stack layout: [callee/function, params...] [return_value?]
        // frame_slot points to callee, params start at frame_slot+1
        // Return value (if any) is at frame_slot + arity + 1
        // So if there's a return value, stack_top > frame_slot + arity + 1
        let minimum_stack = frame_slot + frame_arity + 1;
        let result = if self.stack.top() > minimum_stack {
            Some(self.pop())
        } else {
            None
        };

        // Save the instance BEFORE resetting stack_top
        let saved_instance = instance_slot.map(|slot| self.stack.get(slot).clone());

        upvalues::close_upvalues(&mut self.open_upvalues, &self.stack, frame_slot);

        self.frames.pop();
        self.stack.set_top(frame_slot);

        if self.frames.is_empty() {
            if let Some(value) = result {
                self.stack.set_last_popped(value.clone());
                self.push(value);
            }
            true
        } else {
            // Check if this was an __init__ call
            let value = if let Some(instance) = saved_instance {
                // Return the saved instance instead of the function's return value
                instance
            } else {
                result.unwrap_or_else(|| Rc::new(ObjectType::Nil))
            };
            self.stack.set_last_popped(value.clone());
            self.push(value);
            false
        }
    }
}
